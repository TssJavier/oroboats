import { NextResponse } from "next/server"
import type { NextRequest } from "next/server"
import { jwtVerify } from "jose"

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "oroboats-secret-key-2024")

export async function middleware(request: NextRequest) {
  console.log("üõ°Ô∏è Middleware ejecut√°ndose para:", request.nextUrl.pathname)

  // ‚úÖ PERMITIR LOGIN
  if (request.nextUrl.pathname === "/auth/login") {
    return NextResponse.next()
  }

  // ‚úÖ RUTAS P√öBLICAS PARA CLIENTES (sin autenticaci√≥n)
  const publicApiRoutes = [
    "/api/liability-waiver",
    "/api/create-payment-intent",
    "/api/confirm-booking",
    "/api/discount/validate", // ‚úÖ CORREGIDO: Validar c√≥digos es p√∫blico
  ]

  const isPublicApi = publicApiRoutes.some((route) => request.nextUrl.pathname.startsWith(route))

  if (isPublicApi) {
    console.log("‚úÖ Ruta p√∫blica, permitiendo acceso:", request.nextUrl.pathname)
    return NextResponse.next()
  }

  // ‚úÖ MANEJO ESPECIAL PARA /api/bookings
  if (request.nextUrl.pathname.startsWith("/api/bookings")) {
    if (request.method === "POST") {
      console.log("‚úÖ POST a /api/bookings permitido (crear reserva)")
      return NextResponse.next()
    }
    // GET, PUT, DELETE requieren autenticaci√≥n (gesti√≥n admin)
    console.log("üîí M√©todo", request.method, "en /api/bookings requiere autenticaci√≥n")
  }

  // ‚úÖ PROTEGER RUTAS ADMIN, DASHBOARD Y APIs SENSIBLES
  const protectedPaths = [
    "/admin",
    "/dashboard",
    "/test-descuentos",
    "/api/discount-codes", // üîí GESTI√ìN DE C√ìDIGOS (admin only)
    "/api/deposits", // üîí PROTEGER FIANZAS
    "/api/analytics", // üîí PROTEGER ANALYTICS
    "/api/users", // üîí PROTEGER GESTI√ìN DE USUARIOS
  ]

  // ‚úÖ RUTAS QUE SOLO ADMIN PUEDE ACCEDER
  const adminOnlyPaths = [
    "/admin/codigos",
    "/test-descuentos",
    "/api/discount-codes", // Solo admin puede gestionar c√≥digos
    "/api/users", // Solo admin puede gestionar usuarios
  ]

  const isProtectedPath = protectedPaths.some((path) => request.nextUrl.pathname.startsWith(path))
  const isAdminOnlyPath = adminOnlyPaths.some((path) => request.nextUrl.pathname.startsWith(path))

  // ‚úÖ PROTEGER /api/bookings para m√©todos que no sean POST
  const needsAuth =
    isProtectedPath || (request.nextUrl.pathname.startsWith("/api/bookings") && request.method !== "POST")

  if (needsAuth) {
    const token = request.cookies.get("admin-token")?.value
    console.log("üîç Token encontrado:", !!token)

    if (!token) {
      console.log("‚ùå No token, redirigiendo a login")
      return NextResponse.redirect(new URL("/auth/login", request.url))
    }

    try {
      const { payload } = await jwtVerify(token, JWT_SECRET)
      console.log("‚úÖ Token v√°lido:", payload)

      // ‚úÖ VERIFICAR PERMISOS PARA RUTAS ADMIN-ONLY
      if (isAdminOnlyPath) {
        // ‚úÖ COMPATIBILIDAD: Verificar tanto isAdmin como role
        const isAdmin = payload.isAdmin === true || payload.role === "admin"

        if (!isAdmin) {
          console.log("‚ùå Acceso denegado: Se requiere rol admin")
          return NextResponse.redirect(new URL("/admin?error=access-denied", request.url))
        }
      }

      return NextResponse.next()
    } catch (error) {
      console.log("‚ùå Token inv√°lido:", error)
      return NextResponse.redirect(new URL("/auth/login", request.url))
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    "/admin/:path*",
    "/dashboard/:path*",
    "/auth/login",
    "/test-descuentos",
    "/api/liability-waiver/:path*",
    "/api/bookings/:path*",
    "/api/discount-codes/:path*", // üîí GESTI√ìN ADMIN
    "/api/discount/:path*", // ‚úÖ INCLUIR VALIDACI√ìN (pero permitir p√∫blico)
    "/api/create-payment-intent/:path*",
    "/api/confirm-booking/:path*",
    "/api/deposits/:path*",
    "/api/analytics/:path*",
    "/api/users/:path*",
  ],
}
